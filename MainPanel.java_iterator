import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.JPanel;

import java.lang.Thread;
import java.text.DecimalFormat;
import java.util.ListIterator;
import java.util.Vector;
import java.util.Random;

public class MainPanel extends JPanel implements Runnable {
	private final int initialPlantNum = 10;
	private final int plantsMax = 300;

	private Random rand;
	private Thread gameLoop;
	private Graphics dbg;
	private Image dbImage = null;
	public static int WIDTH =  1260;
	public static int HEIGHT = 700;
	//public static int WIDTH =  200;
	//public static int HEIGHT = 100;
	private static final int FPS = 50;
	private static final long PERIOD = (long)(1.0 / FPS * 1000000000);
	private static long MAX_STATS_INTERVAL = 1000000000L;
	private long calcInterval = 0L;
	private long prevCalcTime;
	private long frameCount = 0;
	private double actualFPS = 0.0;
	private DecimalFormat df = new DecimalFormat("0.0");
	private volatile boolean running = false;
	private Vector<Plant> plants = new Vector<Plant>();
	private int plantsNum = 0;

	public MainPanel() {
		// パネルの推奨サイズを設定、pack()に必要
		setPreferredSize(new Dimension(WIDTH, HEIGHT));
		//setBackground(new Color(69,69,69));
		gameLoop = new Thread(this);
		rand = new Random();

		// init
		birthPlants(initialPlantNum);

		gameLoop.start();
	}

	public void birthPlants(int n){
		JuvenileForm plant;
		if (plantsMax < n) {
			n = plantsMax;
		}

		for(int i=0; i<n; i++){
			plant = new JuvenileForm();
			plant.setSize((int)((Math.random()+2) * 10));
			plant.setPos(rand.nextInt(WIDTH), rand.nextInt(HEIGHT));
			plant.setVelocity(0,0);
			plants.add(plant);
			plantsNum ++;
		}

	}

	public void gameUpdate() {
		Plant plant;
		ListIterator<Plant> plantsIterator;
		Vector<Plant> growMark = new Vector<Plant>();
		Vector<Plant> breedMark = new Vector<Plant>();
		Vector<Plant> delMark = new Vector<Plant>();

		// 植物の成長
		plantsIterator = plants.listIterator();
		while(plantsIterator.hasNext()){
			plant = plantsIterator.next();

			if(plant instanceof JuvenileForm
					&& ((JuvenileForm)plant).isGrowable()
				){
				// juvenile grow up
				System.out.println("growup");
				growMark.add(((JuvenileForm)plant).growup());

			}else if(plantsNum < plantsMax
					&& plant instanceof AdultForm
					&& ((AdultForm)plant).isBreedable()
				){
				// adult breed juvenile
				System.out.println("breed");
				breedMark.add(((AdultForm)plant).breed(WIDTH, HEIGHT));

			}else if(plant instanceof AdultForm
					|| plant instanceof JuvenileForm
				){
				if(plant.getElapsedTime() > 2500){
					// old plants kill 
					System.out.println("dead");
					delMark.add(plant);
				}
			}
		}

		// change plants relation
		for(int i=0; i<growMark.size(); i++){
			plants.add(growMark.get(i));
		}
		for(int i=0; i<breedMark.size(); i++){
			plants.add(breedMark.get(i));
			plantsNum++;
		}
		for(int i=0; i<delMark.size(); i++){
			plants.remove(delMark.get(i));
			plantsNum--;
		}
		plants.trimToSize();

		/*
		try{
			System.out.println("sleep...");
			Thread.sleep(1000);
		}catch(InterruptedException e){
		}
		*/

		// 値の更新
		for(int i=0; i<plants.size(); i++){
			plants.get(i).update();
		}

		if(plantsNum == 0){
			birthPlants(10);
		}
	}

	public void gameRender() {
		if (dbImage == null) {
			// バッファイメージ
			dbImage = createImage(WIDTH, HEIGHT);
			if (dbImage == null) {
				System.out.println("dbImage is null");
				return;
			} else {
				// バッファイメージの描画オブジェクト
				dbg = dbImage.getGraphics();
			}
		}

		dbg.setColor(Color.WHITE);
		dbg.fillRect(0, 0, WIDTH, HEIGHT);

		// informations
		dbg.setColor(Color.BLACK);
		dbg.drawString("FPS: " + df.format(actualFPS), 4, 16);
		dbg.drawString("Plants: " + plantsNum, 4, 35);

		// バッファへ描画
		for(int i=0; i<plants.size(); i++){
			plants.get(i).draw(dbg);
		}

	}

	public void paintScreen() {
		try {
			Graphics g = getGraphics();
			if ((g != null) && (dbImage != null)) {
				g.drawImage(dbImage, 0, 0, null); // バッファイメージを前へ
			}
			Toolkit.getDefaultToolkit().sync();
			if (g != null) {
				g.dispose();  // グラフィックobjを破棄
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void run() {
		/*
		 * ゲームループ
		 */

		long beforeTime, afterTime, timeDiff, sleepTime;
		long overSleepTime = 0L;
		int noDelays = 0;

		beforeTime = System.nanoTime();
		prevCalcTime = beforeTime;

		running = true;
		while (running) {
			gameUpdate();
			gameRender();
			paintScreen();

			afterTime = System.nanoTime();
			timeDiff = afterTime - beforeTime;
			// 前回のフレームの休止時間誤差も引いておく
			sleepTime = (PERIOD - timeDiff) - overSleepTime;

			if (sleepTime > 0) {
				// 休止時間がとれる場合
				try {
					Thread.sleep(sleepTime / 1000000L); // nano->ms
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				// sleep()の誤差
				overSleepTime = (System.nanoTime() - afterTime) - sleepTime;
			} else {
				// 状態更新・レンダリングで時間を使い切ってしまい
				// 休止時間がとれない場合
				overSleepTime = 0L;
				// 休止なしが16回以上続いたら
				if (++noDelays >= 16) {
					Thread.yield(); // 他のスレッドを強制実行
					noDelays = 0;
				}
			}

			beforeTime = System.nanoTime();

			// FPSを計算
			calcFPS();
		}

		System.exit(0);
	}
	private void calcFPS() {
		frameCount++;
		calcInterval += PERIOD;

		// 1秒おきにFPSを再計算する
		if (calcInterval >= MAX_STATS_INTERVAL) {
			long timeNow = System.nanoTime();
			// 実際の経過時間を測定
			long realElapsedTime = timeNow - prevCalcTime; // 単位: ns

			// FPSを計算
	  // realElapsedTimeの単位はnsなのでsに変換する
			actualFPS = ((double) frameCount / realElapsedTime) * 1000000000L;
			//System.out.println(df.format(actualFPS));

			frameCount = 0L;
			calcInterval = 0L;
			prevCalcTime = timeNow;
		}
	}
}


